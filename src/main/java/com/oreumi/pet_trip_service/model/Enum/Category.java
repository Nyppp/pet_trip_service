package com.oreumi.pet_trip_service.model.Enum;

import lombok.AllArgsConstructor;
import lombok.Getter;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Getter
@AllArgsConstructor
public enum Category {
    A01("자연", 1),
    A02("인문·문화·예술·역사", 1),
    A03("레포츠", 1),
    A04("쇼핑", 1),
    A05("음식", 1),
    B02("숙박", 1),
    C01("여행코스", 1),

    // A01
    A0101("자연관광지", 2),
    A0102("관광자원", 2),

    // A02
    A0201("역사관광지", 2),
    A0202("휴양관광지", 2),
    A0203("체험관광지", 2),
    A0204("산업관광지", 2),
    A0205("건축/조형물", 2),
    A0206("문화시설", 2),
    A0207("축제", 2),
    A0208("공연/행사", 2),

    // A03
    A0301("레포츠소개", 2),
    A0302("육상 레포츠", 2),
    A0303("수상 레포츠", 2),
    A0304("항공 레포츠", 2),
    A0305("복합 레포츠", 2),

    // A04
    A0401("쇼핑", 2),

    // A05
    A0502("음식점", 2),

    // B02
    B0201("숙박시설", 2),

    // C01
    C0112("가족코스", 2),
    C0113("나홀로코스", 2),
    C0114("힐링코스", 2),
    C0115("도보코스", 2),
    C0116("캠핑코스", 2),
    C0117("맛코스", 2),

    A01010100("국립공원", 3),
    A01010200("도립공원", 3),
    A01010300("군립공원", 3),
    A01010400("산", 3),
    A01010500("자연생태관광지", 3),
    A01010600("자연휴양림", 3),
    A01010700("수목원", 3),
    A01010800("폭포", 3),
    A01010900("계곡", 3),
    A01011000("약수터", 3),
    A01011100("해안절경", 3),
    A01011200("해수욕장", 3),
    A01011300("섬", 3),
    A01011400("항구/포구", 3),
    A01011600("등대", 3),
    A01011700("호수", 3),
    A01011800("강", 3),
    A01011900("동굴", 3),

    // A01-02 관광자원
    A01020100("희귀동식물", 3),
    A01020200("기암괴석", 3),

    // A02-01 역사관광지
    A02010100("고궁", 3),
    A02010200("성", 3),
    A02010300("문", 3),
    A02010400("고택", 3),
    A02010500("생가", 3),
    A02010600("민속마을", 3),
    A02010700("유적지/사적지", 3),
    A02010800("사찰", 3),
    A02010900("종교성지", 3),
    A02011000("안보관광", 3),

    // A02-02 휴양관광지
    A02020200("관광단지", 3),
    A02020300("온천/욕장/스파", 3),
    A02020400("이색찜질방", 3),
    A02020500("헬스투어", 3),
    A02020600("테마공원", 3),
    A02020700("공원", 3),
    A02020800("유람선/잠수함관광", 3),

    // A02-03 체험관광지
    A02030100("농·산·어촌 체험", 3),
    A02030200("전통체험", 3),
    A02030300("산사체험", 3),
    A02030400("이색체험", 3),
    A02030600("이색거리", 3),

    // A02-04 산업관광지
    A02040400("발전소", 3),
    A02040600("식음료", 3),
    A02040800("기타", 3),
    A02040900("전자-반도체", 3),
    A02041000("자동차", 3),

    // A02-05 건축/조형물
    A02050100("다리/대교", 3),
    A02050200("기념탑/기념비/전망대", 3),
    A02050300("분수", 3),
    A02050400("동상", 3),
    A02050500("터널", 3),
    A02050600("유명건물", 3),

    // A02-06 문화시설
    A02060100("박물관", 3),
    A02060200("기념관", 3),
    A02060300("전시관", 3),
    A02060400("컨벤션센터", 3),
    A02060500("미술관/화랑", 3),
    A02060600("공연장", 3),
    A02060700("문화원", 3),
    A02060800("외국문화원", 3),
    A02060900("도서관", 3),
    A02061000("대형서점", 3),
    A02061100("문화전수시설", 3),
    A02061200("영화관", 3),
    A02061300("어학당", 3),
    A02061400("학교", 3),

    // A02-07 축제
    A02070100("문화관광축제", 3),
    A02070200("일반축제", 3),

    // A02-08 공연/행사
    A02080100("전통공연", 3),
    A02080200("연극", 3),
    A02080300("뮤지컬", 3),
    A02080400("오페라", 3),
    A02080500("전시회", 3),
    A02080600("박람회", 3),
    A02080800("무용", 3),
    A02080900("클래식음악회", 3),
    A02081000("대중콘서트", 3),
    A02081100("영화", 3),
    A02081200("스포츠경기", 3),
    A02081300("기타행사", 3),
    A02081400("넌버벌", 3),

    // A03-01 레포츠소개
    A03010200("수상레포츠", 3),
    A03010300("항공레포츠", 3),

    // A03-02 육상 레포츠
    A03020200("수련시설", 3),
    A03020300("경기장", 3),
    A03020400("인라인(실내 인라인 포함)", 3),
    A03020500("자전거하이킹", 3),
    A03020600("카트", 3),
    A03020700("골프", 3),
    A03020800("경마", 3),
    A03020900("경륜", 3),
    A03021000("카지노", 3),
    A03021100("승마", 3),
    A03021200("스키/스노보드", 3),
    A03021300("스케이트", 3),
    A03021400("썰매장", 3),
    A03021500("수렵장", 3),
    A03021600("사격장", 3),
    A03021700("야영장,오토캠핑장", 3),
    A03021800("암벽등반", 3),
    A03022000("서바이벌게임", 3),
    A03022100("ATV", 3),
    A03022200("MTB", 3),
    A03022300("오프로드", 3),
    A03022400("번지점프", 3),
    A03022700("트래킹", 3),

    // A03-03 수상 레포츠
    A03030100("윈드서핑/제트스키", 3),
    A03030200("카약/카누", 3),
    A03030300("요트", 3),
    A03030400("스노쿨링/스킨스쿠버다이빙", 3),
    A03030500("민물낚시", 3),
    A03030600("바다낚시", 3),
    A03030700("수영", 3),
    A03030800("래프팅", 3),

    // A03-04 항공 레포츠
    A03040100("스카이다이빙", 3),
    A03040200("초경량비행", 3),
    A03040300("헹글라이딩/패러글라이딩", 3),
    A03040400("열기구", 3),

    // A03-05 복합 레포츠
    A03050100("복합 레포츠", 3),

    // A04-01 쇼핑
    A04010100("5일장", 3),
    A04010200("상설시장", 3),
    A04010300("백화점", 3),
    A04010400("면세점", 3),
    A04010500("대형마트", 3),
    A04010600("전문매장/상가", 3),
    A04010700("공예/공방", 3),
    A04010900("특산물판매점", 3),
    A04011000("사후면세점", 3),
    A04011200("스키(보드) 렌탈샵", 3),

    // A05-02 음식점
    A05020100("한식", 3),
    A05020200("서양식", 3),
    A05020300("일식", 3),
    A05020400("중식", 3),
    A05020700("이색음식점", 3),
    A05020900("카페/전통찻집", 3),
    A05021000("클럽", 3),

    // B02-01 숙박시설
    B02010100("관광호텔", 3),
    B02010500("콘도미니엄", 3),
    B02010600("유스호스텔", 3),
    B02010700("펜션", 3),
    B02010900("모텔", 3),
    B02011000("민박", 3),
    B02011100("게스트하우스", 3),
    B02011200("홈스테이", 3),
    B02011300("서비스드레지던스", 3),
    B02011600("한옥", 3),

    // C01 (여행코스)
    C01120001("가족코스", 3),
    C01130001("나홀로코스", 3),
    C01140001("힐링코스", 3),
    C01150001("도보코스", 3),
    C01160001("캠핑코스", 3),
    C01170001("맛코스", 3);

    private final String description;
    private final int level;

    public String getCode() {
        return this.name();
    }

    public static Category fromCode(String code) {
        try {
            return Category.valueOf(code);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid Category code: " + code);
        }
    }

    public static Category fromDescription(String description) {
        for (Category c : values()) {
            if (c.description.equals(description)) return c;
        }
        throw new IllegalArgumentException("Invalid Category description: " + description);
    }

    public static List<Category> startsWith(String prefix) {
        return Arrays.stream(values())
                .filter(v -> v.name().startsWith(prefix))
                .collect(Collectors.toList());
    }

    public boolean isLevel(int target) {
        return this.level == target;
    }

    public static Category getCat1FromCat3(Category cat3Code) {
        if (cat3Code.getLevel() != 3) {
            throw new IllegalArgumentException("cat3 코드만 입력 가능합니다.");
        }
        String cat1Code = cat3Code.name().substring(0, 3); // ex) A01
        return Category.valueOf(cat1Code);
    }

    public static Category getCat2FromCat3(Category cat3Code) {
        if (cat3Code.getLevel() != 3) {
            throw new IllegalArgumentException("cat3 코드만 입력 가능합니다.");
        }
        String cat2Code = cat3Code.name().substring(0, 5); // ex) A0101
        return Category.valueOf(cat2Code);
    }
}
